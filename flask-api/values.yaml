# Default values for nginx.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: luismiguelsaez/flask-api
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  enabled: false # This needs to be disabled for flagger bluegreen strategy
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

serviceMonitor:
  enabled: false
  interval: 15s
  scrapeTimeout: 14s
  namespace: monitoring

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

argoRollout:
  enabled: false
  trafficManagement:
    enabled: false
    type: nginx
  steps:
    - setWeight: 15
    - pause:
        duration: 1m
    - setWeight: 25
    - pause:
        duration: 1m
    - setWeight: 50
    - pause:
        duration: 1m
    - setWeight: 75
    - pause:
        duration: 1m
    - setWeight: 100
    - pause: {}

flaggerCanary:
  enabled: false
  provider: nginx
  metrics:
    server: http://prometheus-kube-prometheus-prometheus.monitoring:9090
  analysis:
    skip: true
    bluegreen:
      # schedule interval (default 60s)
      interval: 1m
      # total number of iterations
      iterations: 10
      # max number of failed iterations before rollback
      threshold: 2
    canary:
      interval: 1m
      # max number of failed metric checks before rollback
      threshold: 10
      # max traffic percentage routed to canary
      # percentage (0-100)
      maxWeight: 50
      # canary increment step
      # percentage (0-100)
      stepWeight: 2
      # promotion increment step (default 100)
      # percentage (0-100)
      stepWeightPromotion: 100
  thresholds:
    # minimum req success rate (non 5xx responses)
    # percentage (0-100)
    successRate: 99
    # maximum req duration P99
    # milliseconds
    latency: 500
  loadtest:
    enabled: true
    # load tester address
    url: http://flagger-loadtester.flux-system/
  helmtest:
    enabled: false
    # helm tester address
    url: http://flagger-helmtester.flux-system/
